"""
This type stub file was generated by pyright.
"""

import _jpype

__all__ = ['JClass', 'JInterface', 'JOverride']
def JOverride(*args, **kwargs): # -> Callable[..., object] | Callable[..., Any]:
    """Annotation to denote a method as overriding a Java method.

    This annotation applies to customizers, proxies, and extensions
    to Java classes. Apply it to methods to mark them as implementing
    or overriding Java methods.  Keyword arguments are passed to the
    corresponding implementation factory.

    Args:
      sticky=bool: Applies a customizer method to all derived classes.

    """
    ...

class JClassMeta(type):
    def __instancecheck__(self, other):
        ...
    


class JClass(_jpype._JClass, metaclass=JClassMeta):
    """Meta class for all Java class instances.

    When called as an object, JClass will contruct a new Java class wrapper.

    All Python wrappers for Java classes derive from this type.
    To test if a Python class is a Java wrapper use
    ``isinstance(obj, jpype.JClass)``.

    Args:
      className (str): name of a Java type.

    Keyword Args:
      loader (java.lang.ClassLoader): specifies a class loader to use
        when creating a class.
      initialize (bool): If true the class will be loaded and initialized.
        Otherwise, static members will be uninitialized.

    Returns:
      JavaClass: a new wrapper for a Java class

    Raises:
      TypeError: if the component class is invalid or could not be found.
    """
    def __new__(cls, jc, loader=..., initialize=...):
        ...
    
    def __class_getitem__(cls, index):
        ...
    


class JInterface(_jpype._JObject, internal=True):
    """A meta class for all Java Interfaces.

    ``JInterface`` is serves as the base class for any Java class that is
    a pure interface without implementation. It is not possible to create
    a instance of a Java interface.

    Example:

    .. code-block:: python

       if isinstance(java.util.function.Function, jpype.JInterface):
          print("is interface")

    """
    ...


