"""
This type stub file was generated by pyright.
"""

"""
JPype Imports Module
--------------------

Once imported this module will place the standard Top Level Domains (TLD) into
the Python scope. These TLDs are ``java``, ``com``, ``org``, ``gov``, ``mil``,
``net`` and ``edu``. Java symbols from these domains can be imported using the
standard Python syntax.

Forms supported:
   - **import <java_pkg> [ as <name> ]**
   - **import <java_pkg>.<java_class> [ as <name> ]**
   - **from <java_pkg> import <java_class>[,<java_class>*]**
   - **from <java_pkg> import <java_class> [ as <name> ]**
   - **from <java_pkg>.<java_class> import <java_static> [ as <name> ]**
   - **from <java_pkg>.<java_class> import <java_inner> [ as <name> ]**

For further information please read the :doc:`imports` guide.

Example:

.. code-block:: python

   import jpype
   import jpype.imports
   jpype.startJVM()

   # Import java packages as modules
   from java.lang import String

"""
__all__ = ["registerImportCustomizer", "registerDomain", "JImportCustomizer"]
_CUSTOMIZERS = ...
def registerImportCustomizer(customizer): # -> None:
    """ Import customizers can be used to import python packages
    into java modules automatically.
    """
    ...

class JImportCustomizer:
    """ Base class for Import customizer.

    Import customizers should implement canCustomize and getSpec.

    Example:

    .. code-block:: python

       # Site packages for each java package are stored under $DEVEL/<java_pkg>/py
       class SiteCustomizer(jpype.imports.JImportCustomizer):
           def canCustomize(self, name):
               if name.startswith('org.mysite') and name.endswith('.py'):
                   return True
               return False
           def getSpec(self, name):
               pname = name[:-3]
               devel = os.environ.get('DEVEL')
               path = os.path.join(devel, pname,'py','__init__.py')
               return importlib.util.spec_from_file_location(name, path)
   """
    def canCustomize(self, name): # -> Literal[False]:
        """ Determine if this path is to be treated differently

        Return:
            True if an alternative spec is required.
        """
        ...
    
    def getSpec(self, name):
        """ Get the module spec for this module.
        """
        ...
    


def unwrap(name): # -> LiteralString:
    ...

class _JImportLoader:
    """ (internal) Finder hook for importlib. """
    def find_spec(self, name, path, target=...): # -> ModuleSpec | None:
        ...
    
    def create_module(self, spec): # -> Any:
        ...
    
    def exec_module(self, fullname): # -> None:
        ...
    


_JDOMAINS = ...
def registerDomain(mod, alias=...): # -> None:
    """ Add a Java domain to Python as a dynamic module.

    This can be used to bind a Java path to a Python path.

    Args:
        mod(str): Is the Python module to bind to Java.
        alias(str, optional): Is the name of the Java path if different
          than the Python name.
    """
    ...

