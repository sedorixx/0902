"""
This type stub file was generated by pyright.
"""

import os
import typing
from . import _jcustomizer
from ._jvmfinder import *

__all__ = ['isJVMStarted', 'startJVM', 'shutdownJVM', 'getDefaultJVMPath', 'getJVMVersion', 'isThreadAttachedToJVM', 'attachThreadToJVM', 'detachThreadFromJVM', 'synchronized', 'JVMNotFoundException', 'JVMNotSupportedException', 'JVMNotRunning']
class JVMNotRunning(RuntimeError):
    ...


if typing.TYPE_CHECKING:
    _PathOrStr = typing.Union[str, os.PathLike]
def deprecated(*args): # -> Callable[..., Callable[..., Any]] | Callable[..., Any]:
    """ Marks a function a deprecated when used as decorator.

    Be sure to start python with -Wd to see warnings.
    """
    ...

def isJVMStarted():
    """ True if the JVM is currently running."""
    ...

_JVM_started = ...
def interactive(): # -> bool:
    ...

def startJVM(*jvmargs: str, jvmpath: typing.Optional[_PathOrStr] = ..., classpath: typing.Union[typing.Sequence[_PathOrStr], _PathOrStr, None] = ..., ignoreUnrecognized: bool = ..., convertStrings: bool = ..., interrupt: bool = ...) -> None:
    """
    Starts a Java Virtual Machine.  Without options it will start
    the JVM with the default classpath and jvmpath.

    The default classpath is determined by ``jpype.getClassPath()``.
    The default jvmpath is determined by ``jpype.getDefaultJVMPath()``.

    Parameters:
     *jvmargs (Optional, str[]): Arguments to give to the JVM.
        The first argument may be the path to the JVM.

    Keyword Arguments:
      jvmpath (str, PathLike):  Path to the jvm library file,
        Typically one of (``libjvm.so``, ``jvm.dll``, ...)
        Using None will apply the default jvmpath.
      classpath (str, PathLike, [str, PathLike]): Set the classpath for the JVM.
        This will override any classpath supplied in the arguments
        list. A value of None will give no classpath to JVM.
      ignoreUnrecognized (bool): Option to ignore
        invalid JVM arguments. Default is False.
      convertStrings (bool): Option to force Java strings to
        cast to Python strings. This option is to support legacy code
        for which conversion of Python strings was the default. This
        will globally change the behavior of all calls using
        strings, and a value of True is NOT recommended for newly
        developed code.
      interrupt (bool): Option to install ^C signal handlers.
        If True then ^C will stop the process, else ^C will
        transfer control to Python rather than halting.  If
        not specified will be False if Python is started as
        an interactive shell.

    Raises:
      OSError: if the JVM cannot be started or is already running.
      TypeError: if a keyword argument conflicts with the positional arguments.

     """
    ...

def initializeResources(): # -> None:
    ...

def shutdownJVM(): # -> None:
    """ Shuts down the JVM.

    This method shuts down the JVM and disables access to existing
    Java objects. Due to limitations in the JPype, it is not possible to
    restart the JVM after being terminated.
    """
    ...

@deprecated("java.lang.Thread.isAttached")
def isThreadAttachedToJVM():
    """ Checks if a thread is attached to the JVM.

    Python automatically attaches threads when a Java method is called.
    This creates a resource in Java for the Python thread. This method
    can be used to check if a Python thread is currently attached so that
    it can be disconnected prior to thread termination to prevent leaks.

    Returns:
      True if the thread is attached to the JVM, False if the thread is
      not attached or the JVM is not running.
    """
    ...

@deprecated("java.lang.Thread.attach")
def attachThreadToJVM(): # -> None:
    """ Attaches a thread to the JVM.

    The function manually connects a thread to the JVM to allow access to
    Java objects and methods. JPype automatically attaches when a Java
    resource is used, so a call to this is usually not needed.

    Raises:
      RuntimeError: If the JVM is not running.
    """
    ...

@deprecated("java.lang.Thread.detach")
def detachThreadFromJVM(): # -> None:
    """ Detaches a thread from the JVM.

    This function detaches the thread and frees the associated resource in
    the JVM. For codes making heavy use of threading this should be used
    to prevent resource leaks. The thread can be reattached, so there
    is no harm in detaching early or more than once. This method cannot fail
    and there is no harm in calling it when the JVM is not running.
    """
    ...

def synchronized(obj):
    """ Creates a resource lock for a Java object.

    Produces a monitor object. During the lifespan of the monitor Java
    will not be able to acquire a thread lock on the object. This will
    prevent multiple threads from modifying a shared resource.

    This should always be used as part of a Python ``with`` startment.

    Arguments:
        obj: A valid Java object shared by multiple threads.

    Example:

    .. code-block:: python

      with synchronized(obj):
         # modify obj values

      # lock is freed when with block ends

    """
    ...

def getJVMVersion(): # -> tuple[Literal[0], Literal[0], Literal[0]] | tuple[int, ...]:
    """ Get the JVM version if the JVM is started.

    This function can be used to determine the version of the JVM. It is
    useful to help determine why a Jar has failed to load.

    Returns:
      A typle with the (major, minor, revison) of the JVM if running.
    """
    ...

@_jcustomizer.JImplementationFor("java.lang.Runtime")
class _JRuntime:
    def addShutdownHook(self, thread):
        ...
    
    def removeShutdownHook(self, thread):
        ...
    


