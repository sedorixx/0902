"""
This type stub file was generated by pyright.
"""

from typing import Tuple

__all__ = ['getDefaultJVMPath', 'get_default_jvm_path', 'JVMNotFoundException', 'JVMNotSupportedException']
class JVMNotFoundException(ValueError):
    """Exception raised when no JVM was found in the search path.

    This exception is raised when the all of the places searched did not
    contain a JVM. The locations searched depend on the machine architecture.
    To avoid this exception specify the JAVA_HOME environment variable as a
    valid jre or jdk root directory.
    """
    ...


class JVMNotSupportedException(ValueError):
    """Exception raised when the JVM is not supported.

    This exception is raised after a search found a valid Java home directory
    was found, but the JVM shared library found is not supported. Typically
    this occurs when the JVM does not match the architecture of Python
    32 vs 64 bit, or the JVM is older than the version used to compile
    JPype.
    """
    ...


def getDefaultJVMPath() -> str:
    """Retrieves the path to the default or first found JVM library.

    Returns:
      The path to the JVM shared library file

    Raises:
      JVMNotFoundException: If there was no JVM found in the search path.
      JVMNotSupportedException: If the JVM was found was not compatible with
        Python due to cpu architecture.

    """
    ...

get_default_jvm_path = ...
class JVMFinder:
    """JVM library finder base class."""
    _libfile: str = ...
    _locations: Tuple[str, ...] = ...
    def __init__(self) -> None:
        ...
    
    def find_libjvm(self, java_home): # -> str:
        """Recursively looks for the given file.

        Parameters:
            java_home(str): A Java home folder

        Returns:
            The first found file path, or None
        """
        ...
    
    @staticmethod
    def find_possible_homes(parents): # -> Generator[Any, Any, None]:
        """
        Generator that looks for the first-level children folders that could be
        Java installations, according to their name

        Parameters:
            parents (str[]): A list of parent directories

        Returns:
            A list of the possible JVM installation folders
        """
        ...
    
    def check(self, jvm): # -> None:
        """
        Check if the jvm is valid for this architecture.

        This method should be overriden for each architecture.

        Raises:
            JVMNotSupportedException: If the jvm is not supported.
        """
        ...
    
    def get_jvm_path(self): # -> str:
        """
        Retrieves the path to the default or first found JVM library

        Returns:
            The path to the JVM shared library file

        Raises:
            ValueError: No JVM library found or No Support JVM found
        """
        ...
    


class LinuxJVMFinder(JVMFinder):
    """Linux JVM library finder class."""
    _java = ...
    _libfile = ...
    _locations = ...
    def __init__(self) -> None:
        ...
    


class DarwinJVMFinder(LinuxJVMFinder):
    """
    Mac OS X JVM library finder class
    """
    _libfile = ...
    _locations = ...
    def __init__(self) -> None:
        """
        Sets up members
        """
        ...
    


class WindowsJVMFinder(JVMFinder):
    """
    Windows JVM library finder class
    """
    reg_keys = ...
    _libfile = ...
    def __init__(self) -> None:
        ...
    
    def check(self, jvm): # -> None:
        ...
    


